git config --global  user.name "T1XJH"配置用户名
git config --global  user.email  "105........@qq.com"配置邮箱

git init 把当前目录变成Git可以管理的仓库

git add test.txt 把文件添加到仓库
git commit -m "第一次提交" 把文件提交到仓库

git status 查看仓库当前状态
git diff   查看修改的内容
git log    显示最近到最远的提交日志
git log --pretty=oneline 省略显示

git reset --hard HEAD^    回退到上一个版本
git reset --hard HEAD^^   回退到上上个版本
git reset --hard HEAD~100 回退到上100个版本
git reset --hard （具体版本号） c5161e(写5，6个也行) c5161e17e4e61a6519c0c2b1b0df344f2070a9d4  回退到具体版本

git reflog 记录历史命令
git checkout -- fileName  让这个fileName文件回到最后一次git commit 或者 git add 时的状态(撤销命令：可以回退到和版本库或缓存区一样)

远程仓库
创建SSH Key:
	ssh-keygen -t  rsa -C "10597........@qq.com" 一直回车
	cd  /c/Users/Administrator/.ssh 进入到这个目录
	id_rsa 私钥 
	id_rsa.pub 公钥

到官网配置公钥或私钥
ssh -T git@github.com 验证钥匙是否通过

创建远程仓库
	到官网去创建仓库
	git clone git@www.......op:/Django/django.git 克隆服务器的远程仓库
	git remote add origin git@github.com:T1XJH/XJH.git 关联远程仓库
	git remote rm origin 删除关联
	git pull origin master 先拉取远程仓库到本地仓库
	git push -u origin master 把本地库的所有内容推送到远程库上（第一次）
	git push origin master 之后只要本地作了提交，就可以通过命令把本地的最新修改推送至GitHub

chown -R git:git /Django/django.git

centos7(测试)：F:/python/python实用工具/Django/Django_testS centos7(测试)
基础： F:/python/code

远程测试服：
cd ../Django/django_test
git clone ../django.git

